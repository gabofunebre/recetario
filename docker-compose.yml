services:
  recetario:
    container_name: recetario
    build: .
    expose:
      - "5000"
    volumes:
      - ./:/app
      - ./instance:/app/instance
      - ./data/images:/app/data/images
    environment:
      - FLASK_APP=app/run.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://recetario:recetario@db:5432/recetario
      - TOKEN_BACKUP=${TOKEN_BACKUP}
    depends_on:
      db:
        condition: service_healthy   # espera a que la DB estÃ© lista
    restart: always
    networks:
      - recetario_net   # privada primero
      - cloudflared_net       # salida por tÃºnel
      - backups_net

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: recetario
      POSTGRES_USER: recetario
      POSTGRES_PASSWORD: recetario
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./data/db:/var/lib/postgresql/data  # ðŸ”’ conserva tus datos
    healthcheck:
      test: ['CMD-SHELL','pg_isready -U recetario -d recetario -h 127.0.0.1 -p 5432 || exit 1']
      interval: 5s
      timeout: 3s
      retries: 30
    restart: always
    networks:
      - recetario_net

networks:
  backups_net:
    external: true
  cloudflared_net:
    external: true
  recetario_net:
    name: recetario_net
